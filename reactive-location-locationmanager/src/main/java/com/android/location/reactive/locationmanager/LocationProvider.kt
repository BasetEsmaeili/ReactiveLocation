package com.android.location.reactive.locationmanager

import android.annotation.SuppressLint
import android.location.Criteria
import android.location.LocationManager
import android.os.Build
import androidx.annotation.RequiresApi

enum class LocationProvider {
    /**
     * Standard name of the GNSS location provider.
     *
     * If present, this provider determines location using GNSS satellites. The responsiveness
     * and accuracy of location fixes may depend on GNSS signal conditions.
     *
     * Locations returned from this provider are with respect to the primary GNSS antenna
     * position within the device. [AndroidLocationManagerService.gnssAntennaInfos] may be used to determine the GNSS
     * antenna position with respect to the Android Coordinate System, and convert between them if
     * necessary. This is generally only necessary for high accuracy applications.
     *
     * The extras Bundle for locations derived by this location provider may contain the
     * following key/value pairs:
     * satellites - the number of satellites used to derive the fix
     */
    GPS,

    /**
     * Standard name of the network location provider.
     *
     * If present, this provider determines location based on nearby of cell tower and WiFi
     * access points. Operation of this provider may require a data connection.
     */
    NETWORK,

    /**
     * A special location provider for receiving locations without actively initiating a location
     * fix. This location provider is always present.
     *
     * This provider can be used to passively receive location updates when other applications or
     * services request them without actually requesting the locations yourself. This provider will
     * only return locations generated by other providers.
     */
    PASSIVE,

    /**
     * Standard name of the fused location provider.
     *
     * If present, this provider may combine inputs from several other location providers to
     * provide the best possible location fix. It is implicitly used for all requestLocationUpdates
     * APIs that involve a [Criteria].
     */
    @RequiresApi(Build.VERSION_CODES.S)
    FUSED;

    @SuppressLint("NewApi")
    internal fun mapToLocationRequestProvider(): String {
        return when (this) {
            GPS -> LocationManager.GPS_PROVIDER
            NETWORK -> LocationManager.NETWORK_PROVIDER
            PASSIVE -> LocationManager.PASSIVE_PROVIDER
            FUSED -> LocationManager.FUSED_PROVIDER
        }
    }

    companion object {
        @SuppressLint("NewApi")
        internal fun mapFrom(provider: String): LocationProvider? {
            return when (provider) {
                LocationManager.GPS_PROVIDER -> GPS
                LocationManager.NETWORK_PROVIDER -> NETWORK
                LocationManager.PASSIVE_PROVIDER -> PASSIVE
                LocationManager.FUSED_PROVIDER -> FUSED
                else -> null
            }
        }
    }
}
